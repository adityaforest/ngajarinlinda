// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Mantan mantan
//
// swagger:model Mantan
type Mantan struct {
	ModelTrackTime

	ModelIdentifier

	// nama
	Nama string `json:"nama,omitempty"`

	// status
	// Enum: [single married]
	Status string `json:"status,omitempty"`

	// umur
	Umur int64 `json:"umur,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Mantan) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ModelTrackTime
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ModelTrackTime = aO0

	// AO1
	var aO1 ModelIdentifier
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ModelIdentifier = aO1

	// AO2
	var dataAO2 struct {
		Nama string `json:"nama,omitempty"`

		Status string `json:"status,omitempty"`

		Umur int64 `json:"umur,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Nama = dataAO2.Nama

	m.Status = dataAO2.Status

	m.Umur = dataAO2.Umur

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Mantan) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ModelTrackTime)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ModelIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		Nama string `json:"nama,omitempty"`

		Status string `json:"status,omitempty"`

		Umur int64 `json:"umur,omitempty"`
	}

	dataAO2.Nama = m.Nama

	dataAO2.Status = m.Status

	dataAO2.Umur = m.Umur

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mantan
func (m *Mantan) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mantanTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["single","married"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mantanTypeStatusPropEnum = append(mantanTypeStatusPropEnum, v)
	}
}

// property enum
func (m *Mantan) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mantanTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Mantan) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mantan based on the context it is used
func (m *Mantan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Mantan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Mantan) UnmarshalBinary(b []byte) error {
	var res Mantan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
